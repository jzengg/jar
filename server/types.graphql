# The following types define the data model of the example service
# based on which the GraphQL API is generated

type User @model {
  id: ID! @isUnique

  # Optional system fields (remove if not needed):
  createdAt: DateTime! # read-only (managed by Graphcool)
  updatedAt: DateTime! # read-only (managed by Graphcool)

  email: String! @isUnique
  password: String!

  jars: [Jar!]! @relation(name: "JarOwner")
  friends: [User!]! @relation(name: "Friends")

  sentFriendRequests: [FriendRequest!]! @relation(name: "SentFriendRequests")
  receivedFriendRequests: [FriendRequest!]! @relation(name: "ReceivedFriendRequests")
}

type FriendRequest @model {
  id: ID! @isUnique

  sender: User! @relation(name: "SentFriendRequests")
  recipient: User! @relation(name: "ReceivedFriendRequests")
  status: FriendRequestStatus! @defaultValue(value: PENDING)  # Optional system fields (remove if not needed):
  
  createdAt: DateTime! # read-only (managed by Graphcool)
  updatedAt: DateTime! # read-only (managed by Graphcool)
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  IGNORED
}

type Jar @model {
  id: ID! @isUnique
  name: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
  notes: [Note!]! @relation(name: "JarNotes")
  owner: User! @relation(name: "JarOwner")
}

type Note @model {
  id: ID! @isUnique
  text: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  jar: Jar! @relation(name: "JarNotes")
}
